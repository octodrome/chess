##################################
#### COMPOSE DOCUMENTATION üê≥ ####
##################################

### üõ¢ Execute a command inside a running compose service (ex: show tables inside db):
# $ docker compose exec db bash
# db:/# psql -h localhost -d chess -U chess -p 5432
# chess=# \dt

### üß™ Run unit tests in front service
# $ docker compose exec front sh
# # npm run test:unit

### üß™ Run unit tests in rest-server service
# $ docker compose exec rest-server sh
# # ginkgo -r

### üëÄ Run compose watching changes
# $ docker compose watch

# @TODO Don't use environment variables to pass sensitive information. Use docker secrets instead:
# https://docs.docker.com/compose/how-tos/use-secrets/
# @TODO db port?

services:
    front:
        depends_on:
            - socket-server
        build:
            context: ./apps/front
            target: dev
        develop:
            watch:
                - action: sync
                  path: ./apps/front
                  target: /usr/src/nuxt-app
                  ignore:
                      - node_modules/
                - action: rebuild
                  path: ./apps/front/package.json
                - action: sync+restart
                  target: /usr/src/nuxt.config.ts
                  path: ./apps/front/nuxt.config.ts
        volumes:
            - ./apps/front:/usr/src/nuxt-app
        ports:
            - 3000:3000
        environment:
            - NUXT_PUBLIC_REST_API_URL=http://localhost:8001/api
            - NUXT_PUBLIC_SOCKET_SERVER_URL=ws://localhost:5000/ws

    rest-server:
        depends_on:
            db:
                condition: service_healthy
        build:
            context: ./apps/rest-server
            target: dev
        develop:
            watch:
                - action: rebuild
                  path: ./apps/rest-server
                  files:
                      - ./apps/rest-server/**/*.go
                      - ./apps/rest-server/go.mod
                      - ./apps/rest-server/go.sum
        ports:
            - 8001:8001
        environment:
            - DB_HOST=db
            - POSTGRES_USER=dev_db_user
            - POSTGRES_PASSWORD=dev_db_password
            - POSTGRES_DB=dev_db
            - DB_PORT=5432
            - TOKEN_TTL=dev_token_ttl
            - JWT_PRIVATE_KEY=dev_jwt_private_key
            - FRONT_URL=http://localhost:3000

    socket-server:
        restart: always
        build:
            context: ./apps/socket-server
            target: dev
        develop:
            watch:
                - action: rebuild
                  path: ./apps/socket-server
                  files:
                      - ./apps/socket-server/**/*.go
                      - ./apps/socket-server/go.mod
                      - ./apps/socket-server/go.sum
        ports:
            - 5000:5000

    db:
        image: postgres:16-alpine
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U dev_db_user -d dev_db']
            interval: 10s
            retries: 5
            start_period: 30s
            timeout: 10s
        ports:
            - 5431:5432
            - 8080:8080
        volumes:
            - db:/var/lib/postgresql/data
        environment:
            - POSTGRES_USER=dev_db_user
            - POSTGRES_PASSWORD=dev_db_password
            - POSTGRES_DB=dev_db

volumes:
    db:
