#######################################
#### COMPOSE PROD DOCUMENTATION üê≥ ####
#######################################
### Run in production: ###
# $ ssh root@165.22.119.201
# $ cd chess_app/
# $ docker pull colinfaivre/chess_front_prod:latest
# $ docker pull colinfaivre/chess_back_prod:latest
# $ docker compose -f docker-compose.prod.yml up --detach --build
# $ docker compose -f docker-compose.prod.yml down
### Execute a command inside a running compose service
# $ docker compose -f docker-compose.prod.yml exec db bash
# db:/# psql -h localhost -d chess -U chess -p 5432
# chess=# \dt

# @TODO Use docker swarm instead of compose in production

services:
    nginx:
        image: nginx:alpine
        restart: always
        depends_on:
            - front
        ports:
            - '80:80'
            - '443:443'
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf
            - /etc/letsencrypt:/etc/letsencrypt

    front:
        depends_on:
            - socket-server
        image: colinfaivre/chess_front_prod
        ports:
            - '3000:3000'
        environment:
            - SOCKET_SERVER_URL=wss://nuxtchess.com/ws

    back:
        depends_on:
            db:
                condition: service_healthy
        image: colinfaivre/chess_back_prod
        ports:
            - 8001:8001
        environment:
            - DB_HOST=${DB_HOST}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - DB_PORT=${DB_PORT}
            - TOKEN_TTL=${TOKEN_TTL}
            - JWT_PRIVATE_KEY=${JWT_PRIVATE_KEY}
            - GIN_MODE=release

    db:
        image: postgres:16-alpine
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}',
                ]
            interval: 10s
            retries: 5
            start_period: 30s
            timeout: 10s
        ports:
            - 5431:5432
            - 8080:8080
        volumes:
            - db:/var/lib/postgresql/data
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}

    socket-server:
        restart: always
        build:
            context: ./socket-server
            target: prod
        ports:
            - 5000:5000

volumes:
    db:
