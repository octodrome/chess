##################################
#### COMPOSE DOCUMENTATION üê≥ ####
##################################
### Run e2e tests with this compose file
# $ docker compose -f docker-compose.test.yml up --abort-on-container-exit

services:
    front:
        depends_on:
            - socket-server
        build:
            context: ./front
            target: dev
        container_name: front
        hostname: front
        networks:
            - e2e_net
        ports:
            - 3000:3000
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:3000']
            interval: 10s
            timeout: 5s
            retries: 5
        environment:
            - REST_API_URL=http://back:8001/

    back:
        depends_on:
            db:
                condition: service_healthy
        build:
            context: ./back
            target: dev
        container_name: back
        hostname: back
        networks:
            - e2e_net
        ports:
            - 8001:8001
        environment:
            - DB_HOST=${DB_HOST}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - DB_PORT=${DB_PORT}
            - TOKEN_TTL=${TOKEN_TTL}
            - JWT_PRIVATE_KEY=${JWT_PRIVATE_KEY}
            - FRONT_URL=http://front:3000

    socket-server:
        restart: always
        build:
            context: ./socket-server
            target: dev
        container_name: socket-server
        hostname: socket-server
        networks:
            - e2e_net
        ports:
            - 5000:5000

    db:
        image: postgres:16-alpine
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}',
                ]
            interval: 10s
            retries: 5
            start_period: 30s
            timeout: 10s
        container_name: db
        hostname: db
        networks:
            - e2e_net
        ports:
            - 5431:5432
            - 8080:8080
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
        tmpfs:
            - /var/lib/postgresql/data # In-memory storage for database data

    cypress:
        image: cypress/included:13.15.0
        container_name: cypress
        depends_on:
            - front
            - back
            - db
            - socket-server
        networks:
            - e2e_net
        working_dir: /e2e
        volumes:
            - ./e2e:/e2e
        entrypoint: ['npm', 'run', 'cy']
        environment:
            - BASE_URL=http://front:3000

networks:
    e2e_net:
        driver: bridge
