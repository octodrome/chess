name: Build and deploy

on:
    push:
        branches:
            - main # also triggered by a merge into main
    pull_request:

env:
    REGISTRY: 'colinfaivre'
    FRONT_IMAGE_NAME: 'chess_front_prod'
    BACK_IMAGE_NAME: 'chess_back_prod'

jobs:
    build-push-images:
        name: Build images
        runs-on: ubuntu-latest
        steps:
            - name: Set up Docker Buildx to speed up image building using cache
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_PASSWORD }}

            - name: Build dev front image
              uses: docker/build-push-action@v6
              with:
                  context: '{{defaultContext}}:front'
                  target: dev
                  push: false
                  load: true # Export to Docker Engine rather than pushing to a registry
                  tags: ${{ github.run_id }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Check front format/linting/typescript/unit-testing in Docker
              run: |
                  docker run --rm ${{ github.run_id }} sh -c "\
                  npm run format:check && \
                  npm run lint && \
                  npm run postinstall && \
                  npm run ts:check && \
                  npm run test:unit"

            - name: Build dev back image
              uses: docker/build-push-action@v6
              with:
                  context: '{{defaultContext}}:back'
                  target: dev
                  push: false
                  load: true # Export to Docker Engine rather than pushing to a registry
                  tags: ${{ github.run_id }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Check back unit-testing in Docker Engine
              run: |
                  docker run --rm ${{ github.run_id }} ginkgo -r

    e2e-tests:
        name: Run E2E Tests
        runs-on: ubuntu-latest
        needs: build-push-images
        steps:
            - name: Check out the repository
              uses: actions/checkout@v2

            - name: Set up Docker Compose
              run: sudo apt-get install docker-compose

            - name: Run E2E tests
              run: docker-compose -f docker-compose.test.yml up --abort-on-container-exit
              env:
                  DB_HOST: ${{ secrets.DB_HOST }}
                  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
                  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
                  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
                  DB_PORT: ${{ secrets.DB_PORT }}
                  TOKEN_TTL: ${{ secrets.TOKEN_TTL }}
                  JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
                  FRONT_URL: ${{ secrets.FRONT_URL }}

    push-images:
        name: Push images to Docker Hub
        runs-on: ubuntu-latest
        needs: e2e-tests
        if: success() # Only run if the previous jobs succeeded
        steps:
            - name: Build and push prod front image to Docker Hub
              uses: docker/build-push-action@v6
              with:
                  context: '{{defaultContext}}:front'
                  target: prod
                  push: true
                  tags: colinfaivre/chess_front_prod
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Build and push prod back image to Docker Hub
              uses: docker/build-push-action@v6
              with:
                  context: '{{defaultContext}}:back'
                  target: prod
                  push: true
                  tags: colinfaivre/chess_back_prod
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    deploy:
        if: ${{ github.event_name != 'pull_request' }}
        runs-on: ubuntu-latest
        needs: push-images

        steps:
            - name: Deploy to Digital Ocean droplet via SSH action
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.DROPLET_HOST_IP }}
                  username: ${{ secrets.DROPLET_USERNAME }}
                  key: ${{ secrets.DROPLET_SSH_KEY }}
                  envs: FRONT_IMAGE_NAME,BACK_IMAGE_NAME,REGISTRY
                  script: |
                      # Login to dockerhub registry
                      echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
                      # Pull latest front and back prod images from dockerhub
                      docker pull $(echo $REGISTRY)/$(echo $FRONT_IMAGE_NAME)
                      docker pull $(echo $REGISTRY)/$(echo $BACK_IMAGE_NAME)
                      cd chess_app
                      # Stop the running docker compose
                      docker compose -f docker-compose.prod.yml down
                      # Run docker compose with the latest prod images
                      docker compose -f docker-compose.prod.yml up --build --detach
                      docker image prune -f
