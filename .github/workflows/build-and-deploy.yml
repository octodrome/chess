name: Build and deploy

on:
    push:
        branches:
            - main
    pull_request:

env:
    REGISTRY: 'colinfaivre'
    FRONT_IMAGE_NAME: 'chess_front_prod'
    BACK_IMAGE_NAME: 'chess_back_prod'

jobs:
    build-push-images:
        name: Build and push images
        runs-on: ubuntu-latest
        steps:
            - name: Set up Docker Buildx to speed up image building using cache
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_PASSWORD }}

            - name: Build front image and export to Docker Engine
              uses: docker/build-push-action@v6
              with:
                  context: '{{defaultContext}}:front'
                  target: prod
                  push: false
                  load: true # Export to Docker Engine rather than pushing to a registry
                  tags: ${{ github.run_id }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Check front format/linting/typescript/unit-testing in Docker
              run: |
                  docker run --rm ${{ github.run_id }} npm run format:check && npm run lint && npm run ts:check && npm run test:unit

            - name: Build back image and export to Docker Engine
              uses: docker/build-push-action@v6
              with:
                  context: '{{defaultContext}}:back'
                  target: dev
                  push: false
                  load: true # Export to Docker Engine rather than pushing to a registry
                  tags: ${{ github.run_id }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Check back unit-testing in Docker Engine
              run: |
                  docker run --rm ${{ github.run_id }} ginkgo -r

            - name: Build and push front image to Docker Hub
              uses: docker/build-push-action@v6
              with:
                  context: '{{defaultContext}}:front'
                  target: prod
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: colinfaivre/chess_front_prod
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Build and push back image to Docker Hub
              uses: docker/build-push-action@v6
              with:
                  context: '{{defaultContext}}:back'
                  target: prod
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: colinfaivre/chess_back_prod
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    deploy:
        if: ${{ github.event_name != 'pull_request' }}
        runs-on: ubuntu-latest
        needs: build-push-images

        steps:
            - name: Deploy to Digital Ocean droplet via SSH action
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.DROPLET_HOST_IP }}
                  username: ${{ secrets.DROPLET_USERNAME }}
                  key: ${{ secrets.DROPLET_SSH_KEY }}
                  envs: FRONT_IMAGE_NAME,BACK_IMAGE_NAME,REGISTRY
                  script: |
                      # Login to dockerhub registry
                      echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
                      # Pull latest front and back prod images from dockerhub
                      docker pull $(echo $REGISTRY)/$(echo $FRONT_IMAGE_NAME)
                      docker pull $(echo $REGISTRY)/$(echo $BACK_IMAGE_NAME)
                      cd chess_app
                      # Stop the running docker compose
                      docker compose -f docker-compose.prod.yml down
                      # Run docker compose with the latest prod images
                      docker compose -f docker-compose.prod.yml up --build --detach
                      docker image prune -f
