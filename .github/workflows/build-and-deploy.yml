name: Build and deploy

on:
  push:
    branches: [ main ]

env:
  REGISTRY: "colinfaivre"
  FRONT_IMAGE_NAME: "chess_front_prod"
  BACK_IMAGE_NAME: "chess_back_prod"

jobs:
  build-images:
    name: Build and push images
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx to speed up image building using cache
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push front image
        uses: docker/build-push-action@v6
        file: ./front/Dockerfile
        target: prod
        with:
          push: true
          tags: $(echo $REGISTRY)/$(echo $FRONT_IMAGE_NAME)
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push back image
        uses: docker/build-push-action@v6
        file: ./back/Dockerfile
        target: prod
        with:
          push: true
          tags: $(echo $REGISTRY)/$(echo $BACK_IMAGE_NAME)
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_registry
    
    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_HOST_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          envs: FRONT_IMAGE_NAME,BACK_IMAGE_NAME,REGISTRY,GITHUB_SHA
          script: |
            # Login to dockerhub registry
            echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            # Pull latest front and back prod images from dockerhub
            docker pull $(echo $REGISTRY)/$(echo $FRONT_IMAGE_NAME)
            docker pull $(echo $REGISTRY)/$(echo $BACK_IMAGE_NAME)
            cd chess_app
            # Stop the running docker compose
            docker compose -f docker-compose.prod.yml down
            # Run docker compose with the latest prod images
            docker compose -f docker-compose.prod.yml up --build --detach
            docker image prune -f